---
title: "TP Remise en jambe - STID"
description: "Bases de Python et d'algorithmique"
author: "Hong-Phuong DANG, Rémi PEPIN, Ludovic DENEUVILLE"
format:
  html:
    toc: true
    toc-location: left
    toc-expand: 3
from: markdown+emoji
number-sections: true
number-depth: 3
---

## Avant de commencer {.unnumbered}

Une bonne habitude pour s'y retrouver et de créer une arborscence claire

```{.default}
└── P:
    └── Cours1A
        └── UE0-Info-Remise-en-jambe
            ├── src
            │   ├── ex1.py
            │   ├── ex2.py
            │   └── ...
```

Vous pouvez créer chaque dossier et fichier à la main, ou utiliser les commandes ci-dessous (*mkdir : make directory*):

- [ ] Ouvrez `Git Bash`
  - Sur le bureau > clic droit > **Git Bash here**
- [ ] Collez les commandes suivantes
  - `mkdir -p /p/Cours1A/UE0-Info-Remise-en-jambe/src/`
  - `touch /p/Cours1A/UE0-Info-Remise-en-jambe/src/ex{1..5}.py`
  - Dans Git Bash :arrow_right: *clic droit > Paste* ou *MAJ + INSER*
- [ ] Fermez *Git Bash*

:::{.callout-important title="Utilisez le lecteur P:"}
Il est important de stocker vos fichiers dans votre lecteur `P:` et non sur votre bureau ou votre disque *C:* car vos fichiers risqueraient de disparaitre !
:::

- [ ] Ouvrez le logiciel Visual Studio Code
- [ ] File > Open Folder
  - Allez dans `/p/Cours1A/`
  - Cliquez [une seule fois]{.underline} sur `UE0-Info-Remise-en-jambe`
  - Cliquez sur le bouton [Sélectionner un dossier]{.text-like-button}
  - Votre dossier apparait à gauche dans l'*explorer*

### Paramétrage VSCode {.unnumbered}

- [ ] Créez à la racine un dossier `.vscode`
- [ ] Dans ce dossier, créez un fichier nommé `settings.json` et collez le contenu ci-dessous

```{.json filename="settings.json"}
{
    "flake8.args": [
        "--max-line-length=100"
    ],
    "[python]": {
        "editor.defaultFormatter": "ms-python.black-formatter",
        "editor.formatOnSave": true,
        "editor.insertSpaces": true,
        "editor.tabSize": 4
    },
    "black-formatter.args": ["--line-length", "100"],
    "python.analysis.extraPaths": [
        "./*"
    ],
    "python.languageServer": "Jedi",
    "python.testing.pytestEnabled": true,
    "files.exclude": {
        "**/__pycache__": true,
        "**/.pytest_cache": true
    },
    "terminal.integrated.env.windows": {
        "PYTHONPATH": "${workspaceFolder}/src"
    },
    "terminal.integrated.env.linux": {
        "PYTHONPATH": "${workspaceFolder}/src"
    },
    "terminal.integrated.defaultProfile.windows": "Git Bash",
}
```

- [ ] Fermez, puis ré-ouvrez VSCode pour que le paramétrage soit actif

::: {.callout-note}
Ce fichier de settings permet d'intégrer à votre espace de travail :

- **Black** : un formateur automatique de code
- **Flake8** : un linter
- **Git Bash** : comme terminal par défaut
- cacher certains fichiers non utiles
:::

## Rappels {.unnumbered}

### Listes et boucles {.unnumbered}

Une liste en Python est une collection ordonnée et modifiable d'éléments, pouvant contenir des éléments de différents types.

Voici quelques exemples de boucles pour afficher les éléments de la liste.

```{.python}
liste = ["Alice", "Benoit", "Camille"]

for v in liste:
    print(v)

for i in range(len(liste)):
    print(liste[i])

for i, v in enumerate(liste):
    print(f"index {i} : valeur {v}")

index = 0
while index < len(liste):
    print(liste[index])
    index += 1
```

### Range {.unnumbered}

Vous pouvez également étudier le comportement de la fonction [range](https://www.w3schools.com/python/ref_func_range.asp){target="_blank"} selon son nombre de paramètres

```{python}
print(f"range(10)       : {list(range(10))}")
print(f"range(2, 10)    : {list(range(2, 10))}")
print(f"range(5, 10, 2) : {list(range(5, 10, 2))}")
```

### Dictionnaire {.unnumbered}

Un dictionnaire est une collection non ordonnée de paires clé-valeur. 

Chaque clé est unique.

```{.python}
# Créer un dictionnaire
dico = {1: "Alice", 2: "Benoit", 3: "Camille"}

# Ajouter un élément
dico[8] = "Dua"

# Supprimer un élément à partir de sa clé
dico.pop(1)

# Parcourir le dictionnaire
for k, v in dico.items():
    print(f"clé {k} : valeur {v}")

for k in dico.keys():
    print(k)

for v in dico.values():
    print(v)
```


## Les variables

### Exercice 1

- [ ] À votre avis que valent les variables *first* et *second* à la fin de ces instructions ? 
  - Vérifiez

#### Bloc 1

```{.python}
first = 6 
second = first + 9 
first = second 
second = 11
```

#### Bloc 2

```{.python}
first = 7
second = first + 5
first += 2
second = first * 9
```

#### Bloc 3

```{.python}
first = 10
second = first % 3
second = second + 2 
first = second // 2
```

### Exercice 2

Affectez les valeurs des expressions ci-dessous dans une variable, puis affichez le résultat. 

::: {.callout-warning}
Certaines expressions ne sont pas valides, dans ce cas expliquez l'erreur et corrigez l'expression.
:::

- [ ] `4 - 7`
- [ ] `"il fait " + 20 + " degrés"`
- [ ] `3 * 2.5 + 4`
- [ ] `"Je veux avoir " + 20 + " en remise à niveau"`


### Exercice 3

- [ ] Ecrivez un script qui permet d'inverser les valeurs de deux variables suivantes :
  - a = 2
  - b = 8

::: {.callout-note title="Pour aller plus loin" collapse="true"}
- [ ] Sauriez-vous le faire sans créer aucune autre variable ?
:::

### Exercice 4

Définissez 4 variables :

- identifiant = ?
- profil = ?
- phrase_debut = `"Bonjour "`
- phrase_fin = `". Votre profil est : "`

Affichez la texte qui résulte de la concaténation des 4 variables. Par exemple : `"Bonjour Alice. Votre profil est : développeuse"`.


### Exercice 5

Considérons maintenant deux variables numériques entières suivantes :

- `heure` : valeurs comprises entre 0 et 23
- `minute` : valeurs comprises entre 0 et 59

Ajoutons une variable textuelle `jour` pouvant prendre les valeurs "lundi", "mardi", ... , "dimanche".

Pour chacun des cas listés ci-dessous, créez une fonction qui renvoie un booléen si le jour et l'horaire est valide :

- [ ] Un jour de semaine (hors week-end)
- [ ] En dehors des heures de travail, i.e. soit le week-end, soit avant 8h, soit après 18h
- [ ] Un vendredi à partir de 18h30
- [ ] N'importe quel jour entre 12h30 et 13h45 inclus
- [ ] Un jeudi à n'importe quelle heure ou entre 15h et 18h15 pour n'importe quel autre jour

::: {.callout-tip title="Exemple" collapse="true"}
```{.python}
def heure_et_minute_pairs(jour, heure, minute) -> bool:
    """Retourne True si heure et minute sont pairs. False sinon"""
    if heure % 2 == 0 and minute % 2 == 0:
        return True
    return False

if __name__ == "__main__":
    print(heure_et_minute_pairs("mardi", 20, 00))
    print(heure_et_minute_pairs("lundi", 15, 27))
    print(heure_et_minute_pairs("mardi", 12, 45))
```
:::

## Les collections

### Listes

- [ ] À votre avis, qu'affiche le code suivant ? 
  - Vérifiez

```{.python}
from copy import copy

initial = [1, 2, 'test', True, 4, 5] 
second = initiale
my_copy = copy(initiale)

initial[0] = 42
initial[5] = 'another'

print(initial)
print(second)
print(my_copy)
```

### Dictionnaires

- [ ] Copiez le code ci-dessous

```{.python}
remise_a_niveau = {
    "UE" : "Informatique pour la data science",
    "module" : "remise_a_niveau",
    "nb_eleve": 20,
    "eleves": ["Alice", "Benoit", "Camille"]
}
```

- [ ] Affichez les valeurs associées à toutes les clés du dictionnaire
- [ ] Ajoutez une élève prénommée *Dua*
- [ ] Mettez à 4 la valeur associée à la clé *nb_eleve*
- [ ] Ajoutez une clé annee qui vaut la valeur `"2024-2025"`

## Conditions

::: {.callout-important}
À partir de maintenant, créez un nouveau fichier *.py* pour chaque nouvelle fonction.
:::

### Fonction Pair

- [ ] Définissez une fonction `est_pair()` qui prend un entier en paramètre et retourne un booléen en sortie
- [ ] Définissez une fonction `est_pair_print()` qui prend un entier en paramètre, affiche s'il est pair et ne retourne rien

### Fizz / Buzz

Écrivez une fonction qui prend en entrée un entier et qui va :

- écrire *FIZZ* si cet entier est multiple de 3
- *BUZZ* s'il est multiple de 5
- *FIZZ BUZZ* s'il est multiple de 3 et 5

Affichez le nombre dans tous les autres cas.

## Boucles

### 10 premiers entiers

Écrivez les 10 premiers entiers positifs :

- [ ] Avec une boucle *for*
- [ ] Avec une boucle *while*

### Fibonacci

- [ ] Écrivez une fonction qui affiche les *n* premiers termes de la suite de Fibonacci

::: {.callout-note title="Rappel"}
La suite de Fibonacci $(F_{n})_{n\in \mathbb {N}}$ est définie par :

- $F_{0} = 0$
- $F_{1} = 1$ 
- $F_{n} = F_{n-1} + F_{n-2}$ pour $n \geq 2$
:::

Le résultat attendu lorsque vous appelez votre fonction : 

```{python}
#| echo: false
def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)

def afficher_suite_fibonacci(n) -> None:
    """Affiche les n premiers termes de la suite de Fibonacci"""
    if isinstance(n, int) and n <= 0:
        raise ValueError("Erreur : n doit être strictement positif")
    a, b = 0, 1
    for _ in range(n):
        print(a, end=" ")
        b, a = a + b, b
```

```{python}
afficher_suite_fibonacci(15)  
```

::: {.callout-tip title="Fonction print"}
Vous pourriez trouver un peu d'aide en consultant de la [documentation sur la fonction print](https://www.w3schools.com/python/ref_func_print.asp){target="_blank"}.
:::


### Fibonacci 10.000

Affichez les termes de la suite de Fibonacci inférieurs à 10 000 :

- [ ] en utilisant une boucle *while*
- [ ] en utilisant une boucle *for*


### Crible d'Ératosthène

Le crible d'Ératosthène est un algorithme simple pour calculer exhaustivement les nombres premiers inférieurs à une valeur fixée N. 

Il consiste à rayer progressivement les nombres qui ne sont pas premiers dans une liste de booléens :

- Initialisez une liste de *N* éléments qui valent tous **True** (tous les nombres sont potentiellement premiers)
  - `liste = [True, True, True, True, True, True, True...]`
- Mettez à **False** les éléments d'index *0* et *1* car ces deux nombres ne sont pas premiers
  - `liste = [False, False, True, True, True, True, True...]`
- Mettez à **False** tous les éléments ayant un index multiple de 2
  - `liste = [False, False, True, True, False, True, False...]`
- Puis recherchez le prochain nombre encore potentiellemnent premier supérieur à 2 :arrow_right: 3
- Mettez à **False** tous les éléments ayant un index multiple de 3
- etc.
- Récupérez les index ayant pour valeur *True* et affichez ces nombres premiers

---

- [ ] Utilisez le crible d'Ératosthène pour calculer et afficher les nombres premiers plus petits que 1000.

### Pyramide

- [ ] Définissez une fonction qui affichera *n* lignes d'un triangle d'étoiles. 

```{.default filename="Exemple pour n=5"}
*********
 *******
  *****
   ***
    *
```

### Nouvelle base

Ecrivez une fonction qui prend en paramètres :

- un entier positif *entier_base_10*
- un entier *nouvelle_base* (compris entre 2 et 16)

Et retourne l'écriture de *entier_base_10* dans la *nouvelle_base*

### Maximum

- [ ] Ecrivez une fonction qui prend [un nombre quelconque]{.underline} de paramètres et retourne la valeur maximale parmi ces paramètres.