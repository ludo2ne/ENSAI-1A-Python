---
title: "POO, documentation et tests - TP2"
description: "Modules, style de code, exceptions et tests"
author: "Ludovic Deneuville"
format:
  html:
    toc: true
    toc-location: left
    toc-expand: 3
from: markdown+emoji
number-sections: true
number-depth: 3
---


## Créer l'arborscence

Vous pouvez créer chaque dossier et fichier à la main, ou utiliser dans un terminal *Git Bash* les commandes ci-dessous (*mkdir : make directory*):

```{.bash}
# Sur la VM ensai
mkdir -p /p/Cours1A/IPOO/TP2/Exercice_{1..5}/ && touch /p/Cours1A/IPOO/TP2/Exercice_{1..5}/ex.py

# Sur un Datalab Onyxia
mkdir -p /home/onyxia/work/IPOO/TP2/Exercice_{1..5}/ && touch /home/onyxia/work/IPOO/TP2/Exercice_{1..5}/ex.py
```


## Moodle

- [ ] Aller sur la page du [tp2](https://foad-moodle.ensai.fr/course/view.php?id=148&section=3){target="_blank"}
- [ ] Ouvrez le sujet et enregistrez le dans `/p/Cours1A/IPOO/TP2`
- [ ] Téléchargez les fichiers *.py* et placez les dans les bons dossiers

## Visual Studio Code

- [ ] Ouvrez Visual Studio Code
  - [ ] File > Open Folder
  - [ ] Cliquez une seule fois sur :file_folder: **Exercice_1**
  - [ ] Cliquez sur [Sélectionner un dossier]{.text-like-button}
    - dans votre *Explorer* à gauche apparait l'arborescence des dossiers et fichiers de **Exercice_1**


### Settings

- icone :gear: en bas à droite > Settings
- options à activer :
  - *files.trimTrailingWhitespace*
  - *files.insertFinalNewline*
  - *files.trimFinalNewlines*
  - *flake8.args*
    - Add item : *--max-line-length=88*
  - *editor.rulers* : 88
  - *python.testing.pytestArgs*
    - Add item : *--doctest-modules*

2 niveaux :

- User : options appliquées au niveau global
- Workspace : réglages spécifiques pour l'espace de travail (dossier)
  - création d'un fichier `.vscode/settings.json` (exportable) qui contient ces réglages


### Flake8

[Flake8](https://flake8.pycqa.org/en/latest/){target="_blank"} est un **Linter** :

- Il analyse le code pour détecter des erreurs, des mauvaises pratiques ou des violations des règles de style
- Il [ne modifie pas]{.underline} directement le code
- Il [signale les problèmes]{style="text-decoration: underline; text-decoration-style: wavy; text-decoration-color: red;"} pour que l'on puisse ensuite les corriger

Il existe également des **formatters** (Black, Ruff) qui à la différence des linters, modifient le code.


### Tests Unitaires

<https://ludo2ne.github.io/ENSAI-2A-Projet-info/doc/cours/tests-unitaires.html>

### Exception

:construction:

## Exercices

### Exercice 1

- [ ] Téléchargez le fichier `fonctions.py` sur Moodle
- [ ] Collez ce fichier dans `/p/Cours1A/IPOO/TP2/Exercice_1`
- [ ] Allez dans VSCode et ouvrez ce fichier
- [ ] Ouvrez un nouveau *Terminal* (Terminal > New Terminal)
- [ ] Suivez les consignes du sujet

### Exercice 2

- [ ] VSCode > File > Open Folder
  - [ ] Cliquez une seule fois sur :file_folder: **Exercice_2**
  - [ ] Cliquez sur [Sélectionner un dossier]{.text-like-button}

Les doctest vus au TP1 ne sont pas utilisés en pratique car cela surcharge les modules.

On préfère exporter les tests dans des modules à part.

Pour lancer les tests avec pytest : 

- `python -m pytest` (ou simplement `pytest` s'il a été ajouté au *PATH*)
- `python -m pytest -v` :arrow_right: v : verbose, i.e. pour avoir plus de détails
- `python -m pytest --doctest-modules`, pour inclure les doctests


### Exercice 3

- [ ] VSCode > File > Open Folder
  - [ ] Cliquez une seule fois sur :file_folder: **Exercice_3**
  - [ ] Cliquez sur [Sélectionner un dossier]{.text-like-button}

:::{.callout-tip collapse="true"}
### Aide

- [ ] Vérifier que les 2 paramètres sont des tuples
- [ ] Vérifier que les 2 paramètres sont des tuples de longueur 3
- [ ] Vérifier que tous les éléments de ces tuples sont des int ou float
- [ ] Vérifier que les éléments de *axes* sont strictements positifs
- [ ] Tester si le point appartient à l'ellipsoïde
- [ ] Ecrire des tests dans un autre fichier en s'inspirant de l'exercice 2
:::


### Exercice 4

- Inscription
  - [ ] Vérifier la validité d'une *adresse électronique*
    - Exemple pour lever une exception
      ```{.python}
      if adresse_electronique.count('@') != 1:
          raise ValueError(
              "L'adresse électronique doit contenir un seul symbole @."
          )
      ```
  - [ ] Valider que le mot de passe respecte les règles
  - [ ] Vérifier que le 2e mot de passe saisi est le même
- [ ] Connexion
  - `base_de_donnees : list[tuple[str, str]]`
- [ ] Ecrire les tests


## Template doc

Voici un modèle que vous pouvez utiliser pour documenter vos fonctions

```{.python}
def ma_fonction(param1, param2=valeur_par_defaut) -> type_retour:
    """description_courte

    description_longue

    Parameters
    ----------
    param1 : type (str, int, float, list...)
        description_param1
    param2 : type
        description_param2

    Returns
    -------
    type_retour
        description_retour

    Examples
    --------
    >>> 1+1
    2
    >>> print("abc")
    abc
    >>> ma_fonction(xxx, yyy)
    valeur_esperee
    """
    return None
```
