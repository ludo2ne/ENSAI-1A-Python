---
title: "Les fonctions"
description: "Les fonctions Python"
author: "Ludovic Deneuville"
format:
  html:
    toc: true
    toc-location: left
    toc-expand: 3
from: markdown+emoji
number-sections: true
number-depth: 3
---


## Valeur retournée

Prenons le cas d'une fonction qui va calculer et retourner le maximum entre deux entiers *a* et *b*.

```{python}
def maximum(a, b) -> int:
    """Retourne le maximum entre a et b"""
    if a > b:
        return a
    return b
```

La fonction `maximum()` retourne une valeur qui peut-être stockée :

```{python}
res = maximum(2, 8)
```

La variable *res* a maintenant pour valeur : `{python} res`


## Simple affichage

```{python}
def affiche_maximum(a, b) -> None:
    """Affiche le maximum entre a et b"""
    if a > b:
        print(a)
    else:        
        print(b)
```

La fonction `affiche_maximum()` effectue le même type d'opérations mais :

- elle ne fait qu'afficher le maximum
- elle ne renvoie pas de résultat 
 

```{python}
affiche_maximum(2, 8)
```

Si l'on essaie de stocker le résultat, il vaudra simplement *None*.

```{python}
#|output: False
res2 = affiche_maximum(2, 8)
```
La variable *res2* a maintenant pour valeur : `{python} res2`


## Valeur par défaut

Il est possible de donner aux paramètres une valeur par défaut

```{python}
def affiche_maximum_def(a, b=0) -> None:
    """Affiche le maximum entre a et b"""
    if a > b:
        print(a)
    else:        
        print(b)
```

```{python}
affiche_maximum_def(2)
```

```{python}
affiche_maximum_def(3)
```


## Multiples retours

Une fonction peut retourner plusieurs valeurs.

```{python}
def min_max(liste):
    """Retourne le minimum et le maximum parmi une liste."""
    return min(liste), max(liste)
```


```{python}
ma_liste = [4, 8, 20, 19, 12, 3]
minimum, maximum = min_max(ma_liste)

print(minimum, maximum)
```


## Lambda fonctions

Une manière très concise pour définir des fonctions

```{python}
carre = lambda x: x**2

print(carre(6))
```

## Template

Voici un modèle que vous pouvez utiliser pour documenter vos fonctions

```{.python}
def ma_fonction(param1, param2=valeur_par_defaut) -> type_retour:
    """description_courte

    description_longue

    Parameters
    ----------
    param1 : type (str, int, float, list...)
        description_param1
    param2 : type
        description_param2

    Returns
    -------
    type_retour
        description_retour
    """

    return None
```
