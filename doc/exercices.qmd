---
title: "Exercices Algorithmie"
description: "Exercices simples pour apprendre le langage Python"
author: "Ludovic Deneuville"
format: 
  html:
    toc: true
    toc-location: left
    toc-expand: 3
from: markdown+emoji
number-sections: true
number-depth: 3
---

## Boucles

### Compte à rebours

Écrivez un code qui permet d'afficher ceci :

- [ ] Avec une boucle for
- [ ] Avec une boucle while

```{.txt}
5
4
3
2
1
boom
```

### Somme et produit

Écrivez un code qui permet de calculer et d'afficher la somme et le produit des entiers de 1 à 50.


### Tables de multiplications

Affichez les tables de multiplication de 1 à 9.

```{.txt}
1 x 1 = 1
1 x 2 = 2
...
1 x 9 = 9
-----------
2 x 1 = 2
...
9 x 9 = 81
```


## Fonctions

### Parité

Écrivez une fonction qui :

- prend en paramètre un entier
- affiche s'il est pair ou impair

Complétez la fonction :

- vérifiez que le paramètre est de type entier
  - sinon affichez un message d'erreur
- affichez également si le paramètre est un multiple de 3

### Factorielle

Écrivez trois fonctions qui calculent et retournent le factoriel d'un entier *n* :

- [ ] avec une boucle for
- [ ] avec une boucle while
- [ ] en utilisant la récursivité

Écrivez une fonction qui affiche toutes les valeurs des factoriels de 0 à n :

```{.txt}
1 1 2 6 24 120 ...
```

### Année bissextile

Écrivez une fonction qui :

- prend en paramètre une année
- retourne *True* si elle est bissextile, *False* sinon

::: {.callout-note}
Une année est bissextile si :

- elle est divisible par 4,
- mais pas divisible par 100, sauf si elle est aussi divisible par 400
:::

### Fibonacci

- [ ] Écrivez une fonction qui retourne le *n* ième termes de la suite de Fibonacci
- [ ] Écrivez une autre fonction qui affiche les *n* premiers termes de la suite de Fibonacci

::: {.callout-note title="Rappel"}
La suite de Fibonacci $(F_{n})_{n\in \mathbb {N}}$ est définie par :

- $F_{0} = 0$
- $F_{1} = 1$ 
- $F_{n} = F_{n-1} + F_{n-2}$ pour $n \geq 2$
:::

### Palindrome

Un nombre palindorme se lit de la même façon de la gauche vers la droite ou de la droite vers la gauche.

Écrivez une fonction qui :

- prend en entrée un entier
- retourne *True* si le nombre est un palindrome


## Chaines de caractères

### Palindrome

Écrivez une fonction `est_palindrome(texte) -> bool` qui retourne *True* si le paramètre texte est un palindrome (i.e. il se lit de la même manière dans les deux sens)

### Mot de passe

Écrivez une fonction `valider_mot_passe(pwd) -> bool` qui retourne *True* si le mot de passe est valide :

- contient au moins 12 caractères
- contient au moins une minuscule, une majuscule et un chiffre

Si l'une des condition n'est pas respectée, levez une exception avec un message explicite.

::: {.callout-note title="Lever une exception"}
```{.python}
if ma_condition:
    raise ValueError("Le mot de passe doit contenir au moins 12 caractères.")
```
:::

### Compter les lettres

Écrivez une fonction qui :

- prend en paramètre une chaine de caractère
- compte le nombre d'occurences de chaque lettre
- retourne un dictionnaire 
  - clé : lettre
  - valeur : nombre d'occurences de la lettre
